configfile: 'config.yaml'

# Access command line paramters
dataset = config['dataset']
mode = config['mode']
minlength = config['minlength']
utilpath = config['paths']['UTILPATH']
environmentpath = config['paths']['ENVIRONMENTPATH']
mcdevolpath = config['paths']['MCDEVOLPATH']
nthread = max(int(config['threads']), 8)
readpath = config['readpath']
outputpath = config['outputpath']

READ_PATH = readpath
ASSEMBLY_PATH = f"{outputpath}/{dataset}/megahit_assembly/{mode}"
ALIGNMENT_PATH = f"{outputpath}/{dataset}/megahit_assembly/{mode}/samfiles"
SAMPLE_IDS = glob_wildcards(f"{READ_PATH}/{{id,[^/]+}}.fastq").id

rule all:
    input:
        f"{ASSEMBLY_PATH}/megahit_out/",
        expand(f"{ALIGNMENT_PATH}/abundances_{{id}}.tsv", id=SAMPLE_IDS),
        expand(f"{ALIGNMENT_PATH}/{{id}}_strobealign.sam", id=SAMPLE_IDS),
        f"{ASSEMBLY_PATH}/single_final.contigs.fa",
        f"{ASSEMBLY_PATH}/contig_length",
        f"{ASSEMBLY_PATH}/sorted_pooled_contigs.fa",
        f"{ALIGNMENT_PATH}/abundances_gf.tsv",
        expand(f"{ALIGNMENT_PATH}/{{id}}_strobealign_sorted.bam", id=SAMPLE_IDS),
        f"{ASSEMBLY_PATH}/metabat2_results",
        f"{ASSEMBLY_PATH}/mcdevol_results",
        f"{ASSEMBLY_PATH}/genomeface_results",
        f"{ASSEMBLY_PATH}/vamb_results",
        f"{ASSEMBLY_PATH}/comebin_results",
        f"{ASSEMBLY_PATH}/checkm2_results"

rule assembly:
    input:
        reads=expand(f"{READ_PATH}/{{id}}.fastq", id=SAMPLE_IDS)
    output:
        assemblypath = directory(f"{ASSEMBLY_PATH}/megahit_out/")
    threads: nthread
    run:
        comma_separated_reads = ",".join(input.reads)
        shell(f"""
            singularity run docker://vout/megahit --out-dir {output.assemblypath} \
                --12 {comma_separated_reads} \
                --presets meta-sensitive -t {threads}
            """)

rule read_contig_alignment:
    input:
        sample_reads=f"{READ_PATH}/{{id}}.fastq",
        assembly=f"{ASSEMBLY_PATH}/megahit_out/"
    output:
        abundfile=f"{ALIGNMENT_PATH}/abundances_{{id}}.tsv",
        samfile=f"{ALIGNMENT_PATH}/{{id}}_strobealign.sam"
    params:
        strobealignpath = config['paths']['STROBEALIGNPATH'],
    threads: nthread
    shell:
        """
        assemblyseq="{input.assembly}/final.contigs.fa"
        echo $assemblyseq "assemblyseq"
        {params.strobealignpath}/strobealign -t {threads} \
            --aemb $assemblyseq --eqx \
            --interleaved {input.sample_reads} \
            > {output.abundfile}
        {params.strobealignpath}/strobealign \
            -t {threads} $assemblyseq --eqx \
            --interleaved {input.sample_reads} | \
            singularity exec \
            docker://biocontainers/samtools:v1.9-4-deb_cv1 \
            samtools view -h -o {output.samfile}
        """

abundfile = f"{ALIGNMENT_PATH}/abundances_gf.tsv"
contigseq = f"{ASSEMBLY_PATH}/sorted_pooled_contigs.fa"
rule abundance_matrix:
    input:
        assemblypath = f"{ASSEMBLY_PATH}/megahit_out/"
    output:
        outfile = f"{ASSEMBLY_PATH}/single_final.contigs.fa",
        length = f"{ASSEMBLY_PATH}/contig_length",
        abund=abundfile,
        contigseq=contigseq
    run:
        outputpath = directory(f"{ASSEMBLY_PATH}")
        assemblyseq = f"{input.assemblypath}/final.contigs.fa"
        shell(f"""
            {utilpath}/convertfasta_multi2single {assemblyseq} {outputpath} --length
            """)
        touch(output.outfile)
        touch(output.length)
    
        version = shell("python --version", quiet=True)
        shell("which python", quiet=True)
        shell(f"""
            sed "N;s/\\n/\\t/g" {output.outfile} | sort -V -k1 | \
            awk -F'\t' 'length($2) >= {minlength}' | \
            sed "s/\\t/\\n/g" > {output.contigseq}
            """)
        shell("python {utilpath}/get_abundance_tsv.py \
            -i {ALIGNMENT_PATH} -l {output.length} -m {minlength}")

rule metabat2_run:
    input:
        abund=abundfile,
        contigseq=contigseq
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/metabat2_results")
    threads: nthread
    conda:
        f"{environmentpath}/metabat2_env.yml"
    shell:
        """
        outputfile="{output.outputdir}/metabat2_results"
        metabat2 -i {input.contigseq} \
            -a {input.abund} -o $outputfile -t {threads} -m 1500
        """

rule mcdevol_run:
    input:
        abund=abundfile,
        contigseq=contigseq
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/mcdevol_results")
    threads: nthread
    conda:
        "mcdevol_env"
    shell:
        """
        python detect_gpu.py
        python {mcdevolpath}/mcdevol.py \
            -c {input.contigseq} -o {output.outputdir} \
            -a {input.abund} --abundformat metabat -n {threads} -l 500
        """

rule sortedbams:
    input:
        samfile=f"{ALIGNMENT_PATH}/{{id}}_strobealign.sam"
    output:
        bamfile=f"{ALIGNMENT_PATH}/{{id}}_strobealign_sorted.bam"
    threads: nthread
    shell:
        """
        singularity exec \
            docker://biocontainers/samtools:v1.9-4-deb_cv1 \
            samtools sort -@{threads} {input.samfile} -o {output.bamfile}
        """

rule marker_annotation:
    input:
        contigseq=contigseq
    output:
        markerhits=f"{ASSEMBLY_PATH}/marker_hits"
    conda:
        "genomeface_env"
    shell:
        """
        python {utilpath}/pyrodigal_prediction.py --seq {input.contigseq} --outdir {ASSEMBLY_PATH}
        """

rule genomeface_run:
    input:
        abund=abundfile,
        contigseq=contigseq,
        markerhits=f"{ASSEMBLY_PATH}/marker_hits"
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/genomeface_results")
    conda:
        "genomeface_env"
    threads: nthread
    shell:
        """
        python detect_gpu_tf.py
        genomeface -i {input.contigseq} -o {output.outputdir} \
            -a {input.abund} -g {input.markerhits} -m {minlength}
        for f in `ls {output.outputdir}/*|sed '/tsv/d;/fasta/d'`; do
            a=$(echo $f".fasta")
            mv $f $a
        done
        """

rule vamb_run:
    input:
        contigseq = f"{ASSEMBLY_PATH}/megahit_out/final.contigs.fa"
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/vamb_results")
    threads: nthread
    conda:
        "vamb_env"
    shell:
        """
        python detect_gpu.py
        vamb --outdir {output.outputdir} \
            --fasta  {input.contigseq} \
            --bamfiles {ALIGNMENT_PATH}/*.bam -m {minlength} \
            --minfasta 200000 --cuda -p {threads}
        """

rule comebin_run:
    input:
        contigseq= contigseq
    output:
        outputdir=directory(f"{ASSEMBLY_PATH}/comebin_results")
    threads: nthread
    conda:
        "comebin_env"
    shell:
        """
        python detect_gpu.py
        run_comebin.sh \
            -a {input.contigseq} -p {ALIGNMENT_PATH} -o {output.outputdir} -t {threads}
        """

rule checkm2_run:
    input:
        metabat2_bins = f"{ASSEMBLY_PATH}/metabat2_results",
        mcdevol_bins = f"{ASSEMBLY_PATH}/mcdevol_results/bins",
        genomeface_bins = f"{ASSEMBLY_PATH}/genomeface_results",
        vamb_bins = f"{ASSEMBLY_PATH}/vamb_results/bins",
        comebin_bins = f"{ASSEMBLY_PATH}/comebin_results/comebin_res/comebin_res_bins"
    output:
        checkm2_results = directory(f"{ASSEMBLY_PATH}/checkm2_results")
    threads: nthread
    conda:
        "checkm2_env"        
    shell:
        """
        checkm2 predict -i {input.metabat2_bins} -o {output.checkm2_results}/metabat2 -x fa --thread {threads}
        checkm2 predict -i {input.mcdevol_bins} -o {output.checkm2_results}/mcdevol -x fasta --thread {threads}
        checkm2 predict -i {input.genomeface_bins} -o {output.checkm2_results}/genomeface -x fasta --thread {threads}
        checkm2 predict -i {input.vamb_bins} -o {output.checkm2_results}/vamb -x fna --thread {threads}
        checkm2 predict -i {input.comebin_bins} -o {output.checkm2_results}/comebin -x fa --thread {threads}
        """
