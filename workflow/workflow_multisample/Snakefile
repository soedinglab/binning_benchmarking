configfile: 'config.yaml'

# Access command line paramters
dataset = config['dataset']
mode = config['mode']
minlength = config['minlength']
utilpath = config['paths']['UTILPATH']
environmentpath = config['paths']['ENVIRONMENTPATH']
mcdevolpath = config['paths']['MCDEVOLPATH']
nthread = max(int(config['threads']), 8)
outputpath = config['outputpath']

READ_PATH = config['readpath']
ASSEMBLY_PATH = f"{outputpath}/{dataset}/megahit_assembly/{mode}"
ALIGNMENT_PATH = f"{outputpath}/{dataset}/megahit_assembly/{mode}/samfiles"
SAMPLE_IDS = glob_wildcards(f"{READ_PATH}/{{id,[^/]+}}.fastq").id

rule all:
    input:
        f"{ASSEMBLY_PATH}/metabat2_filteredbins",
        f"{ASSEMBLY_PATH}/genomeface_results",
        f"{ASSEMBLY_PATH}/vamb_results",
        f"{ASSEMBLY_PATH}/semibin2_results",
        f"{ASSEMBLY_PATH}/taxvamb_results",
        f"{ASSEMBLY_PATH}/comebin_filteredbins"

rule assembly:
    input:
        reads=f"{READ_PATH}/{{id}}.fastq"
    output:
        assemblypath = directory(f"{ASSEMBLY_PATH}/{{id}}/megahit_out/")
    threads: nthread
    shell:
        """
        singularity run docker://vout/megahit --out-dir {output.assemblypath} \
            --12 {input.reads} \
            --presets meta-sensitive -t {threads}
        """

rule concat_assemblies:
    input:
        assembly_files = expand(f"{ASSEMBLY_PATH}/{{id}}/megahit_out/", id=SAMPLE_IDS)
    output:
        concatenated_assembly = f"{ASSEMBLY_PATH}/concatenated_final.contigs.fa"
    shell:
        """
        for id in {SAMPLE_IDS}; do
            sed 's/^>/>S'$id'C/' {ASSEMBLY_PATH}/$id/megahit_out/final.contigs.fa >> {output.concatenated_assembly}
        done
        """

rule read_contig_alignment:
    input:
        sample_reads=f"{READ_PATH}/{{id}}.fastq",
        assembly=f"{ASSEMBLY_PATH}/concatenated_final.contigs.fa"
    output:
        abundfile=f"{ALIGNMENT_PATH}/abundances_{{id}}.tsv",
        samfile=f"{ALIGNMENT_PATH}/{{id}}_strobealign.sam"
    params:
        strobealignpath = config['paths']['STROBEALIGNPATH']
    threads: nthread
    shell:
        """
        {params.strobealignpath}/strobealign -t {threads} \
            --aemb {input.assembly} --eqx \
            --interleaved {input.sample_reads} \
            > {output.abundfile}
        {params.strobealignpath}/strobealign \
            -t {threads} {input.assembly} --eqx \
            --interleaved {input.sample_reads} | \
            singularity exec \
            docker://biocontainers/samtools:v1.9-4-deb_cv1 \
            samtools view -h -o {output.samfile}
        """

abundfile = f"{ALIGNMENT_PATH}/abundances_gf.tsv"
contigseq = f"{ASSEMBLY_PATH}/sorted_multisample_contigs.fa"
rule abundance_matrix:
    input:
        assemblyseq = f"{ASSEMBLY_PATH}/concatenated_final.contigs.fa",
        abundfiles = expand(f"{ALIGNMENT_PATH}/abundances_{{id}}.tsv", id=SAMPLE_IDS)
    output:
        outfile = f"{ASSEMBLY_PATH}/single_concatenated_final.contigs.fa",
        length = f"{ASSEMBLY_PATH}/contig_length",
        abund=abundfile,
        contigseq=contigseq
    run:
        shell(f"""
            {utilpath}/convertfasta_multi2single {input.assemblyseq} {ASSEMBLY_PATH} --length
            """)
        touch(output.outfile)
        touch(output.length)

        shell(f"""
            sed "N;s/\\n/\\t/g" {output.outfile} | sort -V -k1 | \
            awk -F'\t' 'length($2) >= {minlength}' | \
            sed "s/\\t/\\n/g" > {output.contigseq}
            """)
        shell("python {utilpath}/get_abundance_tsv.py \
            -i {ALIGNMENT_PATH} -l {output.length} -m {minlength}")

rule metabat2_run:
    input:
        abund=abundfile,
        contigseq=contigseq
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/metabat2_results")
    threads: nthread
    conda:
        f"{environmentpath}/metabat2_env.yml"
    shell:
        """
        outputfile="{output.outputdir}/metabat2_results"
        metabat2 -i {input.contigseq} \
            -a {input.abund} -o $outputfile -t {threads} -m 1500
        """

rule metabat2_postprocess:
    input:
        metabat2_results = f"{ASSEMBLY_PATH}/metabat2_results"
    output:
        filteredbins = directory(f"{ASSEMBLY_PATH}/metabat2_filteredbins")
    conda:
        "mcdevol_env"
    shell:
        """
        python {utilpath}/splitfasta_bysampleids.py --input_dir {input.metabat2_results} --output_dir {input.metabat2_results}/samplewisebins --format fa
        python {utilpath}/filterbins.py --indir {input.metabat2_results}/samplewisebins --outdir {output.filteredbins} --format fasta --binsize 200000
        # rm -rf {input.metabat2_results}/samplewisebins
        """

# rule mcdevol_run:
#     input:
#         abund=abundfile,
#         contigseq=contigseq
#     output:
#         outputdir = directory(f"{ASSEMBLY_PATH}/mcdevol_results")
#     threads: nthread
#     conda:
#         "mcdevol_env"
#     shell:
#         """
#         python detect_gpu.py
#         python {mcdevolpath}/mcdevol.py \
#             -c {input.contigseq} -o {output.outputdir} \
#             -a {input.abund} --abundformat metabat -n {threads} -l 500 --multi_split
#         python {utilpath}/filterbins.py --indir {output.outputdir}/cluster_split_bins --outdir {output.outputdir}/cluster_split_bins_filtered --binsize 200000
#         """

rule semibin2_run:
    input:
        contigseq = contigseq,
        sortedbam = expand(f"{ALIGNMENT_PATH}/{{id}}_strobealign_sorted.bam", id=SAMPLE_IDS)
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/semibin2_results")
    threads: nthread
    resources:
        mem_mb=20000
    conda:
        f"{environmentpath}/semibin_env.yml"
    shell:
        """
        outputfile="{output.outputdir}/bins"
        SemiBin2 multi_easy_bin -i {input.contigseq} \
            -b {ALIGNMENT_PATH}/*.bam \
            -o {output.outputdir} \
            --min-len {minlength} -p {threads} \
            --minfasta-kbs 200 --engine gpu \
            --separator 'C'
        gunzip {output.outputdir}/bins/*
        """


rule sortedbams:
    input:
        samfile=f"{ALIGNMENT_PATH}/{{id}}_strobealign.sam"
    output:
        bamfile=f"{ALIGNMENT_PATH}/{{id}}_strobealign_sorted.bam"
    threads: nthread
    shell:
        """
        singularity exec \
            docker://biocontainers/samtools:v1.9-4-deb_cv1 \
            samtools sort -@{threads} {input.samfile} -o {output.bamfile}
        """

rule marker_annotation:
    input:
        contigseq=contigseq
    output:
        markerhits=f"{ASSEMBLY_PATH}/marker_hits"
    conda:
        "genomeface_env"
    shell:
        """
        python {utilpath}/pyrodigal_prediction.py --seq {input.contigseq} --outdir {ASSEMBLY_PATH}
        """

rule genomeface_run:
    input:
        abund=abundfile,
        contigseq=contigseq,
        markerhits=f"{ASSEMBLY_PATH}/marker_hits"
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/genomeface_results")
    conda:
        "genomeface_env"
    threads: nthread
    shell:
        """
        python detect_gpu_tf.py
        genomeface -i {input.contigseq} -o {output.outputdir} \
            -a {input.abund} -g {input.markerhits} -m {minlength} -s
        """

rule vamb_run:
    input:
        contigseq = f"{ASSEMBLY_PATH}/concatenated_final.contigs.fa",
        sortedbam = expand(f"{ALIGNMENT_PATH}/{{id}}_strobealign_sorted.bam", id=SAMPLE_IDS)
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/vamb_results")
    threads: nthread
    conda:
        f"{environmentpath}/vamb_env.yml"
    shell:
        """
        python detect_gpu.py
        vamb --outdir {output.outputdir} \
            --fasta  {input.contigseq} \
            --bamfiles {ALIGNMENT_PATH}/*.bam -m {minlength} \
            --minfasta 200000 --cuda -p {threads} -o 'C'
        """

rule taxvamb_run:
    input:
        contigseq = f"{ASSEMBLY_PATH}/single_concatenated_final.contigs.fa",
        sortedbam = expand(f"{ALIGNMENT_PATH}/{{id}}_strobealign_sorted.bam", id=SAMPLE_IDS)
    params:
        METABULIDB = config['paths']['METABULIDB'],
        METABULIOP = config['paths']['METABULIOP']
    output:
        outputdir1 = directory(f"{ASSEMBLY_PATH}/taxvamb_results"),
        outputdir2 = directory(f"{ASSEMBLY_PATH}/taxvamb_results_notaxo")
    threads: nthread
    conda:
        f"{environmentpath}/taxvamb_env.yml"
    shell:
        """
        metabuli classify {input.contigseq} {params.METABULIDB} \
            {params.METABULIOP} taxonomy --seq-mode 1 --threads {threads}
  
        taxconverter metabuli -c {params.METABULIOP}/*_classifications.tsv \
            -r {params.METABULIOP}/*_report.tsv \
            -o {params.METABULIOP}/taxonomy_result.tsv

        vamb bin taxvamb --outdir {output.outputdir1} \
            --fasta {input.contigseq} \
            --bamfiles {ALIGNMENT_PATH}/*.bam \
            --taxonomy {params.METABULIOP}/taxonomy_result.tsv \
            -m {minlength} --minfasta 200000 --cuda \
            -p {threads}  -o 'C'
        
        vamb bin taxvamb --outdir {output.outputdir2} \
            --fasta {input.contigseq} \
            --bamfiles {ALIGNMENT_PATH}/*.bam \
            --taxonomy {params.METABULIOP}/taxonomy_result.tsv \
            -m {minlength} --minfasta 200000 --cuda \
            -p {threads} --no_predictor -o 'C'
        """

rule comebin_run:
    input:
        contigseq = contigseq,
        sortedbam = expand(f"{ALIGNMENT_PATH}/{{id}}_strobealign_sorted.bam", id=SAMPLE_IDS)
    output:
        outputdir = directory(f"{ASSEMBLY_PATH}/comebin_results")
    threads: nthread
    resources:
        mem_mb=10000
    conda:
        f"{environmentpath}/comebin_env.yml"
    shell:
        """
        python detect_gpu.py
        run_comebin.sh \
            -a {input.contigseq} -p {ALIGNMENT_PATH} -o {output.outputdir} -t {threads}
        """
rule comebin_postprocess:
    input:
        comebin_results = f"{ASSEMBLY_PATH}/comebin_results"
    output:
        filteredbins = directory(f"{ASSEMBLY_PATH}/comebin_filteredbins")
    conda:
        "mcdevol_env"
    shell:
        """
        if [ -d {input.comebin_results}/samplewisebins ]; then rm -Rf {input.comebin_results}/samplewisebins; fi
        python {utilpath}/splitfasta_bysampleids.py --input_dir {input.comebin_results}/comebin_res/comebin_res_bins --output_dir {input.comebin_results}/samplewisebins --format fa
        python {utilpath}/filterbins.py --indir {input.comebin_results}/samplewisebins --outdir {output.filteredbins} --format fasta --binsize 200000
        rm -rf {input.comebin_results}/samplewisebins
        """